#!/usr/bin/python
# penthesilea.conf

# Penthesilea produces a hit collection starting from PMAPS. Since it
# also applies a selection to PMAPS it takes the parameters of
# s12_selector.

include('$ICDIR/config/hit_city.conf')
include('$ICDIR/config/s12_selector.conf')

# override the default input/output files:
files_in = '{filein}'
file_out = '{fileout}'
nmax =  100000


# override some of the S12_selector parameters

s1_wmin     =  1 * ns       # min width for S1
s1_wmax     =  1e6 * ns     # Max width

s2_nmax     =     3         # Max number of S2 signals
s2_nsipmmax =   2000        # Max number of SiPMs touched
s2_ethr     =     0.5 * pes # Energy threshold for S2

# override hit_collection parameters

reco_algorithm = 'corona'   # here one could try "corona"
rebin = 1  # if set to 1 no rebin is set to n rebin n times the wfm
qthr           =    3 * pes  # charge threshold, ignore all SiPMs with less than Qthr pes
qlm            =   18 * pes  # every Cluster must contain at least one SiPM with charge >= Qlm

# lm_radius = radius, find new_local_maximum by taking the barycenter of SiPMs within
#             lm_radius of the max sipm. new_local_maximum is new in the sense that the
#             prev loc max was the position of hottest_sipm. (Then allow all SiPMs with
#             new_local_maximum of new_local_maximum to contribute to the pos and q of the
#             new cluster).
# ***In general lm_radius should typically be set to 0, or some value slightly
# larger than pitch or pitch*sqrt(2).***
# ***If lm_radius is set to a negative number, the algorithm will simply return
# the overall barycenter all the SiPms above threshold.***
lm_radius      =   0 * mm  # by default, use 3x3 corona

# new_lm_radius = radius, find a new cluster by calling barycenter() on pos/qs of SiPMs within
#                 new_lm_radius of new_local_maximum
new_lm_radius  =  15 * mm  # by default, use 3 x3 corona
msipm          =   6       # minimum number of SiP
